// Purpose: Academic Research, Generate fake data for company name, products, brands, electronics, foods, and drinks
// License: CC-NC

const CSV_DATA = `

`

export class Dataset {
    constructor() {
        this.company_list = [];
        this.company_sectors = [];
        this.company_subsectors = [];
        this.foods_list = [];
        this.brands_list = [];
        this.products_list = [];

        this.company_formats = [
            '{{company}} {{company}}',
            '{{company}} {{company}} {{company}}',
            '{{company}} {{company}} {{company}} {{company}}',
        ];

        this.company_suffix_prefix_format = [
            '{{prefix}} {{full_company}} {{suffix}}',
            '{{prefix}} {{full_company}}',
            '{{full_company}} {{suffix}}',
        ];

        this.fmt_company_suffix_prefix = [
            '{prefix} {full_company} {suffix}',
            '{prefix} {full_company}',
            '{full_company} {suffix}',
        ];

        this.fmt_brand_product = [
            '{{product}}',
            '{{product}} {{product}}',
            '{{product}} {{product}} {{product}}',
            '{{product}} {{product}} {{gram}}g',
            '{{product}} {{gram}}g',
        ];

        this.prefixs = ['PT', 'CV', 'UD', 'PD', 'Perum'];
        this.suffixs = ['Tbk', '(Persero) Tbk'];
    }

    async loadData() {
        const text = atob(CSV_DATA);
        const rows = text.split('\n').map(row => row.split(','));

        // skip first 4 rows
        for (let i = 4; i < rows.length; i++) {
            const row = rows[i];
            if (!row || !row[0]) continue;
            if (row[0] === '#COMPANY_NAMES') {
                this.company_list.push(...row.slice(1));
            } else if (row[0] === '#SECTORS') {
                this.company_sectors.push(...row.slice(1));
            } else if (row[0] === '#SUBSECTORS') {
                this.company_subsectors.push(...row.slice(1));
            } else if (row[0] === '#FOODS') {
                this.foods_list.push(...row.slice(1));
            } else if (row[0] === '#BRANDS') {
                this.brands_list.push(...row.slice(1));
            } else if (row[0] === '#PRODUCTS') {
                this.products_list.push(...row.slice(1));
            }
        }
    }

    gram() {
        return faker.number.int({ min: 100, max: 1000 });
    }

    brand() {
        return faker.helpers.arrayElement(this.brands_list);
    }

    product() {
        return faker.helpers.arrayElement(this.products_list);
    }

    full_product() {
        const format = faker.helpers.arrayElement(this.fmt_brand_product);
        return this._parseFormat(format);
    }

    company() {
        return faker.helpers.arrayElement(this.company_list);
    }

    company_sector() {
        return faker.helpers.arrayElement(this.company_sectors);
    }

    company_subsector() {
        return faker.helpers.arrayElement(this.company_subsectors);
    }

    food() {
        return faker.helpers.arrayElement(this.foods_list);
    }

    full_company() {
        const format = faker.helpers.arrayElement(this.company_formats);
        return this._parseFormat(format);
    }

    prefix() {
        return faker.helpers.arrayElement(this.prefixs);
    }

    suffix() {
        return faker.helpers.arrayElement(this.suffixs);
    }

    company_suffix_prefix() {
        const format = faker.helpers.arrayElement(this.company_suffix_prefix_format);
        return this._parseFormat(format);
    }

    company_suffix_prefix_from_name(name) {
        const pre_suffix_format = faker.helpers.arrayElement(this.fmt_company_suffix_prefix);
        const prefix = this.prefix();
        const suffix = this.suffix();
        const full_company = name;
        return pre_suffix_format
            .replace('{prefix}', prefix)
            .replace('{suffix}', suffix)
            .replace('{full_company}', full_company);
    }

    get_company_code(name) {
        return name.split(/\s+/).map(word => word[0]?.toUpperCase() || '').join('');
    }

    // Helper to parse format strings like '{{product}} {{gram}}g'
    _parseFormat(format) {
        return format.replace(/\{\{(\w+)\}\}/g, (_, key) => {
            if (typeof this[key] === 'function') {
                return this[key]();
            }
            return '';
        });
    }
}
